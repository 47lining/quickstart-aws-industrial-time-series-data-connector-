{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lambdas for performing generic periodic actions",
    "Parameters": {
        "QSS3BucketName": {
            "Description": "S3 bucket name for the repository. Repository bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "Description": "S3 key prefix for the repository. Repository key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "AfStructureDatabase": {
            "Description": "AF Structure Database",
            "Type": "String",
            "Default": "NuGreen"
        },
        "IncomingQueueName": {
            "Description": "Name of incomning SQS queue",
            "Type": "String"
        },
        "RegionalLambdaBucketName": {
            "Description": "Regional S3 bucket where tha lambda code will be stored",
            "Type": "String"
        },
        "GenericPeriodicLambdaRoleARN": {
            "Type": "String"
        },
        "RDSUri": {
            "Description": "Endpoint for Postgres RDS",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "Management Console subnet 1",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "Management Console subnet 2",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "VPCID": {
            "Description": "Management Console server VPC",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "LambdaSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "LambdaSecurityGroup",
                "SecurityGroupIngress": [
                ]
            }
        },
        "AfSynchronizationLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "RegionalLambdaBucketName"
                    },
                    "S3Key": "lambda_deployment_package.zip"
                },
                "Description": "Send message to synchronize AF structure",
                "Environment": {
                    "Variables": {
                        "SQS_IN_QUEUE_NAME": {
                            "Ref": "IncomingQueueName"
                        },
                        "POSTGRES_URI": {
                            "Ref": "RDSUri"
                        }
                    }
                },
                "Handler": "lambdas.af_sync_lambda.af_sync_handler",
                "Role": {
                    "Ref": "GenericPeriodicLambdaRoleARN"
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "LambdaSecurityGroup"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "PrivateSubnet1ID"
                        },
                        {
                            "Ref": "PrivateSubnet2ID"
                        }
                    ]
                }
            }
        },
        "PiPointsSynchronizationLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "RegionalLambdaBucketName"
                    },
                    "S3Key": "lambda_deployment_package.zip"
                },
                "Description": "Send message to synchronize Pi Points",
                "Environment": {
                    "Variables": {
                        "SQS_IN_QUEUE_NAME": {
                            "Ref": "IncomingQueueName"
                        },
                        "POSTGRES_URI": {
                            "Ref": "RDSUri"
                        }
                    }
                },
                "Handler": "lambdas.pi_points_sync_lambda.pi_points_sync_handler",
                "Role": {
                    "Ref": "GenericPeriodicLambdaRoleARN"
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "LambdaSecurityGroup"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "PrivateSubnet1ID"
                        },
                        {
                            "Ref": "PrivateSubnet2ID"
                        }
                    ]
                }
            }
        },
        "AfSynchronizationLambdaInvokeFromEventsPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AfSynchronizationLambda",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com"
            }
        },
        "PiPointsSynchronizationLambdaInvokeFromEventsPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "PiPointsSynchronizationLambda",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com"
            }
        }
    },
    "Outputs": {
        "AfSynchronizationLambdaARN": {
            "Value": {
                "Fn::GetAtt": [
                    "AfSynchronizationLambda",
                    "Arn"
                ]
            },
            "Description": "AF synchronization lambda arn"
        },
        "PiPointsSynchronizationLambdaARN": {
            "Value": {
                "Fn::GetAtt": [
                    "PiPointsSynchronizationLambda",
                    "Arn"
                ]
            },
            "Description": "Pi Points synchronization lambda arn"
        }
    }
}
